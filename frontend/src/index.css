body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.author-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000; /* Ensure it's on top of other content */
  backdrop-filter: blur(5px); /* Optional: adds a blur effect */
}

.author-popup {
  position: relative;
  width: 80%; /* Adjust size as needed */
  max-width: 800px;
  height: 60%; /* Adjust size as needed */
  max-height: 600px;
  background-color: #020202;
  border-radius: 15px;
  box-shadow: 0 20px 40px rgb(220 99 99 / 30%);
  overflow: hidden; /* Hide letters outside the popup boundary */
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: 'Arial Black', sans-serif; /* Or any bold font */
  animation: fadeInScale 0.3s ease-out forwards;
}

.author-center-text {
  font-size: 5em; /* Large text in the center */
  font-weight: bold;
  color: #333;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  animation: pulse 2s infinite alternate; /* Animation for the center text */
  z-index: 10; /* Ensure it's above falling letters */
}

.falling-letter {
  position: absolute;
  top: -50px; /* Start above the visible area of the popup */
  font-weight: bold;
  white-space: nowrap; /* Prevent text wrapping */
  pointer-events: none; /* Allow clicks to pass through to the overlay */
  opacity: 0; /* Start invisible, will fade in with animation */
  /* CSS variables will be set via inline style in React for each letter */
  /* --initial-rotation, --rotation-target, --letter-size, --popup-height */
}

/* New Keyframes for Falling and Bouncing */
@keyframes fall-bounce {
  0% {
      transform: translateY(0) rotate(var(--initial-rotation, 0deg));
      opacity: 0;
  }
  5% {
      opacity: 1; /* Fade in quickly after starting */
  }
  40% { /* First fall to the bottom of the popup */
      /* calc(popup_height - letter_size - buffer_for_bounce) */
      transform: translateY(calc(var(--popup-height) - var(--letter-size) - 20px)) rotate(var(--rotation-target, 0deg));
  }
  50% { /* First bounce up */
      transform: translateY(calc(var(--popup-height) - var(--letter-size) - 80px)) rotate(var(--rotation-target, 0deg));
  }
  60% { /* Fall back down after first bounce */
      transform: translateY(calc(var(--popup-height) - var(--letter-size) - 20px)) rotate(var(--rotation-target, 0deg));
  }
  70% { /* Second bounce up (smaller bounce) */
      transform: translateY(calc(var(--popup-height) - var(--letter-size) - 50px)) rotate(var(--rotation-target, 0deg));
  }
  80% { /* Fall back down after second bounce */
      transform: translateY(calc(var(--popup-height) - var(--letter-size) - 20px)) rotate(var(--rotation-target, 0deg));
  }
  90% { /* Fade out and move off screen (bottom) */
      opacity: 0;
      transform: translateY(calc(var(--popup-height) + 50px)) rotate(var(--rotation-target, 0deg));
  }
  100% { /* Reset for next iteration (off-screen top, invisible) */
      transform: translateY(0) rotate(var(--initial-rotation, 0deg));
      opacity: 0;
  }
}

/* Keyframes for animations */
@keyframes fadeInScale {
  from {
      opacity: 0;
      transform: scale(0.8);
  }
  to {
      opacity: 1;
      transform: scale(1);
  }
}

@keyframes fall {
  0% {
      transform: translateY(0) rotate(var(--initial-rotation, 0deg));
      opacity: 0;
  }
  10% {
      opacity: 1; /* Fade in quickly */
  }
  100% {
      transform: translateY(calc(100vh + 100px)) rotate(calc(var(--initial-rotation, 0deg) + var(--rotation-speed, 0deg))); /* Fall off screen */
      opacity: 0; /* Fade out as it falls */
  }
}

@keyframes rotate {
  from {
      transform: rotate(var(--initial-rotation, 0deg));
  }
  to {
      transform: rotate(calc(var(--initial-rotation, 0deg) + 720deg)); /* Rotate twice */
  }
}

@keyframes pulse {
  from {
      transform: scale(1);
      color: #333;
  }
  to {
      transform: scale(1.05);
      color: #007bff; /* Change color slightly */
  }
}